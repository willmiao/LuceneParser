/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(QueryParser)

package will.miao.parser;

import java.io.StringReader;

import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Query;

/** Simple brace matcher. */
public class QueryParser extends QueryParserBase {
  public QueryParser(String[] fieldNames, int[] fieldTypes) {
    this(new StringReader(""));
    init(fieldNames, fieldTypes);
  }
}

PARSER_END(QueryParser)

<*> TOKEN: {
    <#_DIGIT:       ["0"-"9"] >
|   <#_LETTER:      ["a"-"z", "A"-"Z", "$", "_"] >
|   <#_FLIT1:       (<_DIGIT>)+ "." (<_DIGIT>)* >
|   <#_FLIT2:       "." (<_DIGIT>)+ >
|   <#_FLIT3:       (<_DIGIT>)+ >
|   <#_EXPONENT:    ("e" | "E") ("+" | "-") (<_DIGIT>)+ >
|   <#_WHITESPACE:  " " >
}

/**
  *  KEY WORDS
  */
TOKEN: {
    <KW_AND:        "&&" | "AND" >
|   <KW_OR:         "||" | "OR" >
|   <KW_BETWEEN:    "BETWEEN" >
|   <KW_DISTINCT:   "DISTINCT" >
|   <KW_EXISTS:     "EXISTS" >
|   <KW_FALSE:      "FALSE" >
|   <KW_ILIKE:      "ILIKE" >
|   <KW_IN:         "IN" >
|   <KW_IREGEXP:    "IREGEXP" >
|   <KW_IS:         "IS" >
|   <KW_LIKE:       "LIKE" >
|   <KW_NOT:        "NOT" >
|   <KW_NULL:       "NULL" >
|   <KW_NULLS:      "NULLS" >
|   <KW_REGEXP:     "REGEXP" >
|   <KW_RLIKE:      "RLIKE" >
|   <KW_TRUE:       "TRUE" >
}

<DEFAULT> SKIP : {
  < <_WHITESPACE>>
}

<DEFAULT> TOKEN: {
    <INTEGER_LITERAL:                   <_DIGIT>(<_DIGIT>)* >
|   <DECIMAL_LITERAL:                   (<_FLIT1> | <_FLIT2> | <_FLIT3>) (<_EXPONENT>)? >
|   <IDENTIFIER:                        (<_DIGIT>)* <_LETTER> (<_LETTER> | <_DIGIT>)* >
|   <SINGLE_QUOTE_STRING_LITERAL:       "\'" (~["\'"] | "\\\'")+ "\'" >
|   <DOUBLE_QUOTE_STRING_LITERAL:       "\"" (~["\""] | "\\\"")+ "\"" >
|   <LPAREN:                            "(" >
|   <RPAREN:                            ")" >
|   <COMMA:                             "," >
|   <EQUAL:                             "=" >
|   <LESS_THAN:                         "<" >
|   <GREATER_THAN:                      ">" >
|   <LESS_THAN_OR_EQUAL:                "<=" >
|   <GREATER_THAN_OR_EQUAL:             ">=" >
|   <NOT_EQUAL:                         "!=" | "<>" >
}

/** Root production. */
Query TopLevelQuery() : {
  Query query;
}
{
  query = Predicate() <EOF>
  { return query; }
}

Query Predicate() : {
  Query query;
  String field;
}
{
  field = Expression()
  (
//  query = IsNullPredicate() query = RemoveingLeftRecursion(query)
//  { return query; }
//  | query = IsNotNullPredicate() query = RemoveingLeftRecursion(query)
//  { return query; }
    query = BetweenPredicate(field) query = RemoveingLeftRecursion(query)
    { return query; }
    | query = ComparisonPredicate(field) query = RemoveingLeftRecursion(query)
    { return query; }
    | query = InPredicate(field) query = RemoveingLeftRecursion(query)
    { return query; }
//  | query = ExistsPredicate() query = RemoveingLeftRecursion(query)
//  { return query; }
//  | query = LikePredicate() query = RemoveingLeftRecursion(query)
//  { return query; }
  )
  | <LPAREN> query = Predicate() <RPAREN> query = RemoveingLeftRecursion(query)
  { return query; }
}

Query BetweenPredicate(String field) : {
  String e1, e2;
}
{
  <KW_BETWEEN> e1 = Expression() <KW_AND> e2 = Expression()
  { return newRangeQuery(field, e1, e2, true, true); }
}

Query ComparisonPredicate(String field) : {
  String e2;
}
{
  <EQUAL> e2 = Expression()
  { return newExactQuery(field, e2); }
  | <NOT_EQUAL> e2 = Expression()
  { return new BooleanQuery.Builder().add(newExactQuery(field, e2), BooleanClause.Occur.MUST_NOT).build(); }
  | <LESS_THAN> e2 = Expression()
  { return newRangeQuery(field, null, e2, false, false); }
  | <GREATER_THAN> e2 = Expression()
  { return newRangeQuery(field, e2, null, false, false); }
  | <LESS_THAN_OR_EQUAL> e2 = Expression()
  { return newRangeQuery(field, null, e2, false, true); }
  | <GREATER_THAN_OR_EQUAL> e2 = Expression()
  { return newRangeQuery(field, e2, null, true, false); }
}

Query RemoveingLeftRecursion(Query q1) : {
  BooleanQuery.Builder builder = new BooleanQuery.Builder();
  Query q2;
}
{
  <KW_AND> q2 = Predicate()
  { return builder.add(q1, BooleanClause.Occur.MUST).add(q2, BooleanClause.Occur.MUST).build(); }
  | <KW_OR> q2 = Predicate()
  { return builder.add(q1, BooleanClause.Occur.SHOULD).add(q2, BooleanClause.Occur.SHOULD).build(); }
  | <EOF>
  { return q1; }
}

Query InPredicate(String field) : {
  BooleanQuery.Builder builder = new BooleanQuery.Builder();
  Query query;
  String value;
}
{
  <KW_IN> <LPAREN> value = Expression()
  { builder.add(newExactQuery(field, value), BooleanClause.Occur.SHOULD); }
  (
    <COMMA> value = Expression()
    { builder.add(newExactQuery(field, value), BooleanClause.Occur.SHOULD); }
  )*
  <RPAREN>
  { return builder.build(); }
}

String Expression() : {
  Token result;
}
{
  result = <IDENTIFIER>
  { return result.image; }
  | result = <INTEGER_LITERAL>
  { return result.image; }
  | result = <DECIMAL_LITERAL>
  { return result.image; }
  | result = <SINGLE_QUOTE_STRING_LITERAL>
  { return result.image.substring(1, result.image.length()-1); }
  | result = <DOUBLE_QUOTE_STRING_LITERAL>
  { return result.image.substring(1, result.image.length()-1); }
}